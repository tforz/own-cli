{"version":3,"sources":["router/router.ts","components/Loading/index.tsx","store/toast.ts","store/index.ts","libs/env.ts","components/Toast/Toast.tsx","libs/hostConig.ts","apis/http.ts","apis/Api.ts","apis/user/user.api.ts","App.tsx","router/history.ts","router/authRouter.tsx","serviceWorker.ts","index.tsx"],"names":["routes","path","exact","component","React","lazy","auth","Loading","memo","props","mask","className","style","backgroundColor","initialState","show","text","rootReducer","combineReducers","toast","state","action","produce","draft","type","payload","store","createStore","composeWithDevTools","Dispatch","value","dispatch","hide","ENV","Toast","selector","equalityFn","p","useSelector","timer","current","clearTimeout","setTimeout","CSSTransition","timeout","in","unmountOnExit","devHost","env","process","REACT_APP_SECRET_API","pro","dev","URL","host","test","isDev","Host","axios","interceptors","response","use","data","Promise","reject","error","Api","isSuccess","res","code","UserApi","this","get","config","localStorage","getItem","token","url","headers","Authorization","console","log","params","method","request","qs","stringify","VConsole","App","require","useState","setState","useDispatch","useEffect","getEnums","version","children","history","createBrowserHistory","renderRoutes","extraProps","switchProps","map","route","i","key","strict","render","to","pathname","from","location","Boolean","window","hostname","match","ReactDOM","Suspense","fallback","authRouter","router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d7c4e36e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Home = React.lazy(() => import('pages/Home'));\r\nconst Login = React.lazy(() => import('pages/Login'));\r\n\r\n\r\nexport interface IRouter {\r\n  path: string\r\n  exact?: boolean,\r\n  auth?: boolean, // 是否需要登录\r\n  component: any,\r\n  children?: [{\r\n    path: string,\r\n    exact: boolean,\r\n    component: any,\r\n  }\r\n  ]\r\n}\r\n\r\nexport const routes: IRouter[] = [\r\n  {\r\n    path: '/',\r\n    exact: true,\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/login',\r\n    auth: true,\r\n    component: Login\r\n  }\r\n]\r\n\r\nexport default routes\r\n\r\n","import React from 'react'\r\nimport './index.scss'\r\n\r\nexport const Loading: React.FC = React.memo(function Loading(props: any) {\r\n  const mask = typeof props.mask === 'undefined' ? true : props.mask;\r\n  return (\r\n    <div className=\"loading\" style={{ backgroundColor: mask ? '#0003' : '#0000' }}>\r\n      <div className=\"loadingContent\">\r\n        <div className=\"chasedot\" />\r\n        <div className=\"chasedot\" />\r\n        <div className=\"chasedot\" />\r\n        <div className=\"chasedot\" />\r\n        <div className=\"chasedot\" />\r\n        <div className=\"chasedot\" />\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n","import produce from 'immer';\r\n\r\n\r\n\r\nconst initialState = {\r\n  show: false,\r\n  text: \"\",\r\n};\r\n\r\nexport type Toast = typeof initialState;\r\n\r\nexport default (state = initialState, action: any) => produce(state, draft => {\r\n  switch (action.type) {\r\n    case \"toast/show\":\r\n      draft.show = true;\r\n      draft.text = action.payload;\r\n      break;\r\n    case \"toast/hide\":\r\n      draft.show = false;\r\n      break;\r\n  }\r\n});\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport toast, { Toast } from './toast';\r\n\r\nconst rootReducer = combineReducers({ toast });\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport const Dispatch = {\r\n  toast: {\r\n    show: (value: string) => store.dispatch({ type: \"toast/show\", payload: value }),\r\n    hide: () => store.dispatch({ type: \"toast/hide\" }),\r\n  },\r\n}\r\n\r\nexport interface Store {\r\n  toast: Toast,\r\n}\r\n\r\nexport function useStore<TSelected>(selector: (state: Store) => TSelected, equalityFn?: (left: TSelected, right: TSelected) => boolean) {\r\n  return useSelector<Store, TSelected>(selector, equalityFn);\r\n}\r\n","import * as host from './hostConig'\r\n\r\nenum ENV {\r\n  dev = 'dev',\r\n  test = 'test',\r\n  pro = 'pro'\r\n}\r\n\r\n// 环境\r\nconst env: string = process.env.REACT_APP_SECRET_API !== 'development' ? ENV.pro : ENV.dev;\r\n\r\n// 版本号\r\nexport const Version = '1.0';\r\n\r\nconst URL = {\r\n  host: '',\r\n};\r\n\r\nswitch (env as string) {\r\n  case ENV.dev:\r\n    URL.host = host.devHost;\r\n    break;\r\n  case ENV.test:\r\n    URL.host = host.testHost;\r\n    break;\r\n  case ENV.pro:\r\n    URL.host = host.proHost;\r\n    break;\r\n  default:\r\n    URL.host = host.devHost;\r\n}\r\n\r\nexport const isDev = env === ENV.dev || env === ENV.test;\r\nexport const Host = URL.host;\r\nexport const Urls = URL;\r\n\r\n","import * as React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport { Dispatch, useStore } from '../../store';\r\n\r\nimport \"./Toast.scss\";\r\n\r\nexport const Toast: React.FC = React.memo(function Toast(props) {\r\n  const toast = useStore(p => p.toast);\r\n  const timer = React.useRef<NodeJS.Timeout>();\r\n\r\n  React.useEffect(() => {\r\n    if (toast.show) {\r\n      if (timer.current) {\r\n        clearTimeout(timer.current);\r\n      }\r\n      timer.current = setTimeout(() => Dispatch.toast.hide(), 2000);\r\n    }\r\n    return () => timer.current && clearTimeout(timer.current);\r\n  }, [toast.show]);\r\n\r\n  return (\r\n    <CSSTransition timeout={300} in={toast.show} unmountOnExit>\r\n      <div className=\"Toast\">{toast.text}</div>\r\n    </CSSTransition>\r\n  );\r\n});\r\n","/**\r\n * @description: 此文件仅作配置host文件使用，请不要再除env.ts之外的任何地方使用它。\r\n */\r\nexport const devHost = 'https://api.jizhen.cool'\r\nexport const testHost = 'https://api.jizhen.cool'\r\nexport const proHost = 'https://shizhu.jizhenmed.com/api'","\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport qs from \"qs\";\r\nimport { Host } from \"libs/env\";\r\nimport { Dispatch } from \"store\";\r\n\r\n\r\naxios.interceptors.response.use(\r\n  response => {\r\n    if (response.data) {\r\n      return response;\r\n    }\r\n    return Promise.reject(response);\r\n  },\r\n  error => {\r\n    return Promise.reject(error.response);\r\n  },\r\n);\r\n\r\nexport class Http {\r\n\r\n  async request(config: AxiosRequestConfig) {\r\n    let response: any;\r\n    let token = await localStorage.getItem('token')\r\n\r\n    try {\r\n      config = { ...config, url: Host + config.url, headers: { ...config.headers, Authorization: 'Bearer ' + token } };\r\n      response = await axios(config);\r\n      return response.data;\r\n    } catch (e) {\r\n      console.log(e);\r\n      Dispatch.toast.show(e && e.data?.error ? e.data.error : \"网络错误\");\r\n    }\r\n  }\r\n\r\n  async get(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"GET\",\r\n      url,\r\n      params,\r\n    };\r\n    return this.request(config);\r\n  }\r\n\r\n  async post(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"POST\",\r\n      url,\r\n      data: params,\r\n    };\r\n    return this.request(config);\r\n  }\r\n\r\n  protected formPost(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"POST\",\r\n      url,\r\n      data: qs.stringify(params),\r\n    };\r\n    return this.request(config);\r\n  }\r\n\r\n  protected patch(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"PATCH\",\r\n      url,\r\n      data: params,\r\n    };\r\n    return this.request(config);\r\n  }\r\n\r\n\r\n  protected put(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"PUT\",\r\n      url,\r\n      data: params,\r\n    };\r\n    return this.request(config);\r\n  }\r\n\r\n  protected delete(url: string, params?: any) {\r\n    const config: AxiosRequestConfig = {\r\n      method: \"DELETE\",\r\n      url,\r\n      data: params,\r\n    };\r\n    return this.request(config);\r\n  }\r\n}\r\n","import { UserApi } from \"./user\";\r\n\r\nconst isSuccess = (res: any) => {\r\n  return res && res.code === 1;\r\n};\r\n\r\nexport const Api = {\r\n  isSuccess: isSuccess,\r\n  UserApi: new UserApi(),\r\n};\r\n","import { Http } from \"../http\";\r\n\r\nexport class UserApi extends Http {\r\n  async getEnums() {\r\n    const res: any = await this.get('/base/enums')\r\n    return res\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Loading } from 'components';\r\n// import { Store } from 'store';\r\nimport { isDev } from 'libs/env';\r\nimport { Api } from 'apis'\r\nimport VConsole from 'vconsole'\r\n\r\nimport 'assets/scss.scss';\r\nisDev && new VConsole();\r\n\r\n\r\nconst App: React.FC<any> = (props) => {\r\n\r\n  const config = require('../package.json');\r\n  const [state, setState] = React.useState(true)\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    Api.UserApi.getEnums()\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setState(false)\r\n      return () => {\r\n        setState(true)\r\n      }\r\n    }, 500)\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    dispatch({ type: 'INIT' });\r\n  })\r\n\r\n  console.log('version about:', process.env, config.version);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {props.children}\r\n      {state && <Loading />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory({\r\n  /* pass a configuration object here if needed */\r\n});\r\n\r\nexport default history;","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nconst renderRoutes = (routes: any, auth: boolean, extraProps = {}, switchProps = {}) => routes ? (\r\n  <Switch {...switchProps} >\r\n    {\r\n      routes.map((route: any, i: number) => (\r\n        <Route\r\n          key={route.key || i}\r\n          path={route.path}\r\n          exact={route.exact}\r\n          strict={route.strict}\r\n          render={(props) => {\r\n            if (route.auth || auth || route.path === '/login') {\r\n              return <route.component {...props} {...extraProps} route={route} />\r\n            }\r\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n          }}\r\n        />\r\n      ))}\r\n  </Switch>\r\n) : null\r\n\r\nexport default renderRoutes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom'\r\nimport { Provider } from 'react-redux';\r\n\r\nimport router from './router/router';\r\nimport App from './App';\r\nimport history from './router/history';\r\nimport authRouter from './router/authRouter';\r\n\r\nimport { Loading, Toast } from 'components';\r\nimport { store } from './store'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst isLogin = true\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <React.Suspense fallback={<Loading />}>\r\n      <Provider store={store}>\r\n        <App>{authRouter(router, isLogin)}</App>\r\n        <Toast />\r\n      </Provider>\r\n    </React.Suspense>\r\n  </Router>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}